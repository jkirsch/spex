package edu.tuberlin.spex.utils;

import com.google.common.primitives.Doubles;
import com.google.common.primitives.Ints;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.math3.random.EmpiricalDistribution;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Date: 15.02.2015
 * Time: 12:47
 *
 */
public class ParseBlockDistributionTest {

    @Test
    public void testParse() throws Exception {

        String input =
                "16 [(2,6065), (6,2503), (11,7757), (12,4322), (13,932), (18,17888), (19,2653), (20,13265), (27,842), (30,871), (34,10753), (35,12163), (36,6557), (42,1329), (44,499), (46,210), (48,128), (59,2312), (61,1936), (65,828), (69,17651), (72,11262), (80,339), (82,414), (91,1373), (100,188), (109,147), (110,6303), (114,5314), (123,25102), (127,75), (133,126), (134,183), (144,23038), (150,168), (159,10192), (164,18498), (165,8356), (167,285), (178,19415), (179,3240), (183,4744), (197,7267), (199,12442), (216,186275), (233,23800), (235,3437), (236,77), (251,8779), (270,52877), (0,65974), (4,5989), (10,2956), (17,24563), (32,804), (37,729), (41,1199), (45,237), (49,207), (55,318), (58,176), (64,649), (70,5807), (71,247), (81,60), (88,6226), (89,227), (92,1899), (94,1280), (95,1438), (96,587), (99,84), (108,22733), (112,4040), (115,3749), (117,188), (128,4722), (131,162), (142,11358), (145,52), (147,672), (149,992), (168,80), (180,34894), (181,3919), (184,869), (200,3396), (201,992), (202,444), (234,25068), (3,6314), (5,3765), (8,1955), (14,1561), (22,2566), (23,4857), (24,916), (26,1243), (28,1902), (39,3768), (43,763), (47,58), (56,2222), (60,2609), (62,300), (63,533), (66,234), (74,797), (76,74), (77,2517), (87,15982), (105,19681), (106,1736), (126,5855), (129,93), (141,15041), (143,70), (146,8921), (151,30), (160,19748), (161,34), (162,15540), (166,911), (182,4952), (185,181), (215,15852), (218,1923), (219,203), (252,23333), (269,5065), (287,1), (1,19398), (7,3280), (9,1933), (15,2672), (21,3240), (25,1488), (29,2749), (31,482), (38,2436), (40,1316), (52,23806), (53,440), (54,11165), (57,8165), (73,312), (75,6420), (78,1882), (79,620), (83,88), (90,8509), (93,4069), (97,421), (98,153), (107,1375), (111,3908), (113,2152), (116,1383), (124,3322), (125,32), (130,15360), (132,74), (148,2347), (163,1349), (177,2319), (196,14462), (198,340394), (214,10018), (217,7253), (232,1950), (253,5118)]\n" +
                " 1 [(0,1497132)]\n" +
                " 2 [(3,58728), (0,425144), (4,903912), (1,109347), (7,1)]\n" +
                " 4 [(2,30061), (6,91101), (11,58728), (12,491695), (13,41189), (18,343208), (1,46716), (7,49120), (0,221733), (17,27820), (3,17240), (5,65594), (8,12926), (23,1)]\n" +
                " 8 [(2,15560), (6,8874), (11,8744), (12,10856), (13,7013), (18,17651), (19,28262), (20,20310), (30,28767), (33,9299), (34,1880), (42,12606), (48,2319), (59,27820), (61,5640), (69,8779), (0,127823), (4,6619), (10,18891), (32,21645), (41,29440), (49,37117), (70,86393), (1,28297), (7,5519), (9,46722), (15,1450), (21,10489), (25,774), (29,31535), (31,15008), (38,15041), (40,38664), (50,386474), (52,2486), (79,1), (3,11556), (5,13457), (14,2972), (16,1397), (22,7940), (23,4527), (24,973), (28,19681), (39,41368), (43,563), (51,25534), (60,242396)]";

        Pattern pattern = Pattern.compile("(\\d+),(\\d+)");

        for (String line : input.split("\n")) {
            Matcher matcher = pattern.matcher(line);

            Integer size = Ints.tryParse(StringUtils.substringBefore(line, "[").trim());
            List<Double> doubles = new ArrayList<>();
            List<Integer> blocks = new ArrayList<>();
            while (matcher.find()) {
                Integer blockId = Ints.tryParse(matcher.group(1));
                Double counts = Doubles.tryParse(matcher.group(2));
                doubles.add(counts);
                blocks.add(blockId);
            }
            double[] values = new double[doubles.size()];
            int pos = -1;
            for (Double aDouble : doubles) {
                values[++pos] = aDouble;
            }
            System.out.printf("%4s %4d (%5d) %3.2f\n", size, blocks.size(), size*size, blocks.size() / (double) (size*size));

            EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();
            empiricalDistribution.load(values);

            System.out.println(empiricalDistribution.getSampleStats());

        }

    }
}
